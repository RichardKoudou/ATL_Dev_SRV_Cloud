(()=>{var e={};e.id=33,e.ids=[33],e.modules={3040:(e,t,r)=>{"use strict";r.d(t,{A:()=>n});var s=r(12518);if(!process.env.MONGODB_URI)throw Error('Invalid/Missing environment variable: "MONGODB_URI"');let a=process.env.MONGODB_URI,n=new s.MongoClient(a,{appName:"devrel.template.nextjs"})},3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},12518:e=>{"use strict";e.exports=require("mongodb")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},78335:()=>{},94078:(e,t,r)=>{"use strict";r.r(t),r.d(t,{patchFetch:()=>v,routeModule:()=>m,serverHooks:()=>g,workAsyncStorage:()=>x,workUnitAsyncStorage:()=>h});var s={};r.r(s),r.d(s,{DELETE:()=>l,GET:()=>c,PUT:()=>p});var a=r(96559),n=r(48088),o=r(37719),i=r(32190),u=r(3040),d=r(12518);async function c(e,{params:t}){try{let e=(await u.A).db("sample_mflix"),{idTheater:r}=t;if(!d.ObjectId.isValid(r))return i.NextResponse.json({status:400,message:"Invalid theater ID",error:"ID format is incorrect"});let s=await e.collection("theaters").findOne({_id:new d.ObjectId(r)});if(!s)return i.NextResponse.json({status:404,message:"Theater not found",error:"No theater found with the given ID"});return i.NextResponse.json({status:200,data:{theater:s}})}catch(e){return i.NextResponse.json({status:500,message:"Internal Server Error",error:e.message})}}async function p(e,{params:t}){try{let r=(await u.A).db("sample_mflix"),{idTheater:s}=t;if(!s||!d.ObjectId.isValid(s))return i.NextResponse.json({status:400,message:"Invalid or missing idTheater"});let a=await e.json(),n={location:{...a.location?.address,...a.location?.city},updatedAt:new Date},o=await r.collection("theaters").findOneAndUpdate({_id:new d.ObjectId(s)},{$set:n},{returnDocument:"after"});if(!o)return i.NextResponse.json({status:404,message:"Theater not found"});return i.NextResponse.json({status:201,data:{updateTheater:o}})}catch(e){return console.error("MongoDB Update Error:",e),i.NextResponse.json({status:500,message:"Internal Server Error",error:e.message})}}async function l(e,{params:t}){try{let e=(await u.A).db("sample_mflix"),{idTheater:r}=t;if(!r||!d.ObjectId.isValid(r))return i.NextResponse.json({status:400,message:"Invalid or missing movieId"});let s=await e.collection("theaters").deleteOne({_id:new d.ObjectId(r)});return i.NextResponse.json({status:204,result:s,message:"Theater deleted successfully"})}catch(e){return console.error("MongoDB Delete Error:",e),i.NextResponse.json({status:500,message:"Internal Server Error",error:e.message})}}let m=new a.AppRouteRouteModule({definition:{kind:n.RouteKind.APP_ROUTE,page:"/api/theaters/[idTheater]/route",pathname:"/api/theaters/[idTheater]",filename:"route",bundlePath:"app/api/theaters/[idTheater]/route"},resolvedPagePath:"C:\\Users\\richa\\Documents\\cous_master_1\\ATL_DEV_SRV_CLOUD\\with-mongodb-atl_service_cloud\\app\\api\\theaters\\[idTheater]\\route.ts",nextConfigOutput:"",userland:s}),{workAsyncStorage:x,workUnitAsyncStorage:h,serverHooks:g}=m;function v(){return(0,o.patchFetch)({workAsyncStorage:x,workUnitAsyncStorage:h})}},96487:()=>{}};var t=require("../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),s=t.X(0,[447,580],()=>r(94078));module.exports=s})();