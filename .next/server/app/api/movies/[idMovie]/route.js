(()=>{var e={};e.id=969,e.ids=[969],e.modules={3040:(e,t,s)=>{"use strict";s.d(t,{A:()=>n});var r=s(12518);if(!process.env.MONGODB_URI)throw Error('Invalid/Missing environment variable: "MONGODB_URI"');let o=process.env.MONGODB_URI,n=new r.MongoClient(o,{appName:"devrel.template.nextjs"})},3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},12518:e=>{"use strict";e.exports=require("mongodb")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},68561:(e,t,s)=>{"use strict";s.r(t),s.d(t,{patchFetch:()=>f,routeModule:()=>m,serverHooks:()=>g,workAsyncStorage:()=>v,workUnitAsyncStorage:()=>x});var r={};s.r(r),s.d(r,{DELETE:()=>l,GET:()=>c,PUT:()=>p});var o=s(96559),n=s(48088),a=s(37719),i=s(32190),u=s(3040),d=s(12518);async function c(e,{params:t}){try{let e=(await u.A).db("sample_mflix"),{idMovie:s}=t;if(!d.ObjectId.isValid(s))return i.NextResponse.json({status:400,message:"Invalid movie ID",error:"ID format is incorrect"});let r=await e.collection("movies").findOne({_id:new d.ObjectId(s)});if(!r)return i.NextResponse.json({status:404,message:"Movie not found",error:"No movie found with the given ID"});return i.NextResponse.json({status:200,data:{movie:r}})}catch(e){return i.NextResponse.json({status:500,message:"Internal Server Error",error:e.message})}}async function p(e,{params:t}){try{let s=(await u.A).db("sample_mflix"),{idMovie:r}=t;if(!r||!d.ObjectId.isValid(r))return i.NextResponse.json({status:400,message:"Invalid or missing movieId"});let o=await e.json(),n={plot:o.plot,genres:o.genres||null,cast:o.cast,directors:o.directors,updatedAt:new Date},a=await s.collection("movies").findOneAndUpdate({_id:new d.ObjectId(r)},{$set:n},{returnDocument:"after"});if(!a)return i.NextResponse.json({status:404,message:"Movie not found"});return i.NextResponse.json({status:201,data:{updateMovie:a}})}catch(e){return console.error("MongoDB Update Error:",e),i.NextResponse.json({status:500,message:"Internal Server Error",error:e.message})}}async function l(e,{params:t}){try{let e=(await u.A).db("sample_mflix"),{idMovie:s}=t;if(!s||!d.ObjectId.isValid(s))return i.NextResponse.json({status:400,message:"Invalid or missing movieId"});let r=await e.collection("movies").deleteOne({_id:new d.ObjectId(s)});return i.NextResponse.json({status:204,result:r,message:"Movie deleted successfully"})}catch(e){return console.error("MongoDB Delete Error:",e),i.NextResponse.json({status:500,message:"Internal Server Error",error:e.message})}}let m=new o.AppRouteRouteModule({definition:{kind:n.RouteKind.APP_ROUTE,page:"/api/movies/[idMovie]/route",pathname:"/api/movies/[idMovie]",filename:"route",bundlePath:"app/api/movies/[idMovie]/route"},resolvedPagePath:"C:\\Users\\richa\\Documents\\cous_master_1\\ATL_DEV_SRV_CLOUD\\with-mongodb-atl_service_cloud\\app\\api\\movies\\[idMovie]\\route.ts",nextConfigOutput:"",userland:r}),{workAsyncStorage:v,workUnitAsyncStorage:x,serverHooks:g}=m;function f(){return(0,a.patchFetch)({workAsyncStorage:v,workUnitAsyncStorage:x})}},78335:()=>{},96487:()=>{}};var t=require("../../../../webpack-runtime.js");t.C(e);var s=e=>t(t.s=e),r=t.X(0,[447,580],()=>s(68561));module.exports=r})();