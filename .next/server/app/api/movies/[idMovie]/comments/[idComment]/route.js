(()=>{var e={};e.id=179,e.ids=[179],e.modules={3040:(e,t,s)=>{"use strict";s.d(t,{A:()=>o});var r=s(12518);if(!process.env.MONGODB_URI)throw Error('Invalid/Missing environment variable: "MONGODB_URI"');let n=process.env.MONGODB_URI,o=new r.MongoClient(n,{appName:"devrel.template.nextjs"})},3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},12518:e=>{"use strict";e.exports=require("mongodb")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},78335:()=>{},78386:(e,t,s)=>{"use strict";s.r(t),s.d(t,{patchFetch:()=>f,routeModule:()=>l,serverHooks:()=>g,workAsyncStorage:()=>v,workUnitAsyncStorage:()=>x});var r={};s.r(r),s.d(r,{DELETE:()=>p,GET:()=>u,PUT:()=>c});var n=s(96559),o=s(48088),a=s(37719),i=s(32190),d=s(3040),m=s(12518);async function u(e,{params:t}){try{let e=(await d.A).db("sample_mflix"),{idComment:s}=t;if(!m.ObjectId.isValid(s))return i.NextResponse.json({status:400,message:"Invalid movie ID",error:"ID format is incorrect"});let r=await e.collection("comments").findOne({_id:new m.ObjectId(s)});if(!r)return i.NextResponse.json({status:404,message:"comments not found",error:"No comment found with the given ID"});return i.NextResponse.json({status:200,data:{comment:r}})}catch(e){return i.NextResponse.json({status:500,message:"Internal Server Error",error:e.message})}}async function c(e,{params:t}){try{let s=(await d.A).db("sample_mflix"),{idComment:r}=t;if(!r||!m.ObjectId.isValid(r))return i.NextResponse.json({status:400,message:"Invalid or missing movieId"});let n=await e.json(),o={plot:n.plot,genres:n.genres||null,cast:n.cast,directors:n.directors,updatedAt:new Date},a=await s.collection("comments").findOneAndUpdate({_id:new m.ObjectId(r)},{$set:o},{returnDocument:"after"});if(!a)return i.NextResponse.json({status:404,message:"Comment not found"});return i.NextResponse.json({status:201,data:{updateComment:a}})}catch(e){return console.error("MongoDB Update Error:",e),i.NextResponse.json({status:500,message:"Internal Server Error",error:e.message})}}async function p(e,{params:t}){try{let e=(await d.A).db("sample_mflix"),{idComment:s}=t;if(!s||!m.ObjectId.isValid(s))return i.NextResponse.json({status:400,message:"Invalid or missing movieId"});let r=await e.collection("comments").deleteOne({_id:new m.ObjectId(s)});return i.NextResponse.json({status:204,result:r,message:"Comments deleted successfully"})}catch(e){return console.error("MongoDB Delete Error:",e),i.NextResponse.json({status:500,message:"Internal Server Error",error:e.message})}}let l=new n.AppRouteRouteModule({definition:{kind:o.RouteKind.APP_ROUTE,page:"/api/movies/[idMovie]/comments/[idComment]/route",pathname:"/api/movies/[idMovie]/comments/[idComment]",filename:"route",bundlePath:"app/api/movies/[idMovie]/comments/[idComment]/route"},resolvedPagePath:"C:\\Users\\richa\\Documents\\cous_master_1\\ATL_DEV_SRV_CLOUD\\with-mongodb-atl_service_cloud\\app\\api\\movies\\[idMovie]\\comments\\[idComment]\\route.ts",nextConfigOutput:"",userland:r}),{workAsyncStorage:v,workUnitAsyncStorage:x,serverHooks:g}=l;function f(){return(0,a.patchFetch)({workAsyncStorage:v,workUnitAsyncStorage:x})}},96487:()=>{}};var t=require("../../../../../../webpack-runtime.js");t.C(e);var s=e=>t(t.s=e),r=t.X(0,[447,580],()=>s(78386));module.exports=r})();